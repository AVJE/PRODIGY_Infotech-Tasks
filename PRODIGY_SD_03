# Simple Sudoku Solver using Backtracking in Python

# Example Sudoku puzzle (0 represents empty cells)
grid = [
    [0, 0, 0, 0, 0, 0, 2, 0, 0],
    [0, 0, 0, 6, 0, 0, 0, 0, 3],
    [0, 7, 4, 0, 8, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 3, 0, 0, 2],
    [0, 8, 0, 0, 4, 0, 0, 1, 0],
    [6, 0, 0, 5, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 0, 7, 8, 0],
    [5, 0, 0, 0, 0, 9, 0, 0, 0],
    [0, 0, 9, 0, 0, 0, 0, 0, 0]
]


def print_grid(grid):
    for i in range(9):
        for j in range(9):
            print(grid[i][j], end=" ")
        print()

def find_empty(grid):
    # Find an empty cell in the grid (return position)
    for i in range(9):
        for j in range(9):
            if grid[i][j] == 0:
                return (i, j)  # row, col
    return None

def is_valid(grid, num, pos):
    row, col = pos

    # Check row
    for j in range(9):
        if grid[row][j] == num and j != col:
            return False

    # Check column
    for i in range(9):
        if grid[i][col] == num and i != row:
            return False

    # Check 3x3 box
    box_x = col // 3
    box_y = row // 3

    for i in range(box_y * 3, box_y * 3 + 3):
        for j in range(box_x * 3, box_x * 3 + 3):
            if grid[i][j] == num and (i, j) != pos:
                return False

    return True

def solve(grid):
    # Recursive backtracking solver
    find = find_empty(grid)
    if not find:
        return True  # Puzzle solved
    else:
        row, col = find

    for num in range(1, 10):
        if is_valid(grid, num, (row, col)):
            grid[row][col] = num

            if solve(grid):
                return True

            grid[row][col] = 0  # Reset on backtrack

    return False

# Main driver
print("Original Sudoku Puzzle:")
print_grid(grid)

if solve(grid):
    print("\nSolved Sudoku Puzzle:")
    print_grid(grid)
else:
    print("No solution exists for the given Sudoku puzzle.")
